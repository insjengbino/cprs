<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">	
	
    <!--
		Activates a load-time weaver for the context. Any bean within the context that
		implements LoadTimeWeaverAware (such as LocalContainerEntityManagerFactoryBean)
		will receive a reference to the autodetected load-time weaver.
	-->
	<context:load-time-weaver/>
	
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- DriverManagerDataSource is a local DataSource that works in any environment. -->
	<!-- Note that DriverManagerDataSource does not pool connections and is therefore not intended for production. -->
	<!-- See applicationContext-jdbc.xml for an example of using Commons DBCP BasicDataSource as an alternative. -->
	<!-- See the Image Database sample application for an example of using C3P0 ComboPooledDataSource as alternative. -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
			p:password="${jdbc.password}"/>
	
	<!-- JPA EntityManagerFactory -->		
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
			p:dataSource-ref="dataSource">
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter"
					p:databasePlatform="${jpa.toplink.databasePlatform}" 
					p:showSql="${jpa.showSql}" 
					p:generateDdl="${jpa.toplink.generateDdl}"/>
		</property>		 
		<property name="jpaProperties">
      		<props>        		
        		<prop key="toplink.cache.shared.default">false</prop>
      		</props>
    	</property>
	</bean>
<!-- 
        		<prop key="toplink.ddl-generation">create-tables</prop>
        		<prop key="toplink.ddl-generation.output-mode">both</prop>
 -->

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
			p:entityManagerFactory-ref="entityManagerFactory"/>
			
	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>	

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	-->
	<tx:annotation-driven/>

	<!--
		PostProcessors to perform exception translation on @Repository classes (from native
		exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
	-->
	
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	
	<context:component-scan base-package="com.ins.registration.service"/>
	<context:component-scan base-package="com.ins.message.service"/>
	<context:component-scan base-package="com.ins.registration.action"/> 
	<context:component-scan base-package="com.ins.registration.web"/>
<!--
	<bean id="MessageSenderLauncher" class="com.ins.message.service.MessageSenderLauncherImpl" autowire="byName">
	</bean>
-->	
</beans>

